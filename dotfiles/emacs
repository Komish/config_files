
;; Added by Package.el.  This must come before configurations of
;; installed packages.  Don't delete this line.  If you don't want it,
;; just comment it out by adding a semicolon to the start of the line.
;; You may delete these explanatory comments.
(package-initialize)

(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(ansi-color-faces-vector
   [default default default italic underline success warning error])
 '(ansi-color-names-vector
   ["black" "#d55e00" "#009e73" "#f8ec59" "#0072b2" "#cc79a7" "#56b4e9" "white"])
 '(custom-enabled-themes (quote (misterioso)))
 '(global-visual-line-mode t)
 '(org-agenda-files nil)
 '(org-log-into-drawer t)
 '(package-selected-packages (quote (org-bullets))))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(org-level-1 ((t (:inherit outline-1 :height 1.5))))
 '(org-level-2 ((t (:inherit outline-2 :height 1.25)))))

;; adding structuring:
;; ref https://www.emacswiki.org/emacs/DotEmacsStructuring
(add-to-list 'load-path "~/.emacs.d/user")
(load-library "style")
(load-library "private")

;; set the todo hierarchy
(setq org-todo-keywords
  '(
(sequence "TODO" "PENDING" "BLOCKED" "WORKING" "FOLLOWUP" "|" "DONE" "CANCELED")
))

(setq org-todo-keyword-faces
      '(("WORKING" . "#E35DBF")
	("PENDING" . "#d4b45d")
	("BLOCKED" . "#fc0303")
	("CANCELED" . "#8a7870")
	("FOLLOWUP" . "#ffff00")))

;; remove splash screen emacs
(setq inhibit-splash-screen t)

;; parenthesis mode
(show-paren-mode t)

;; Show line-number in the mode line
(line-number-mode 1)

;; Show column-number in the mode line
(column-number-mode 1)

;; Scroll line by line
(setq scroll-step 1)

;; Log Rescheduled Tasks
(setq org-log-reschedule (quote time))

;; track done time
(setq org-log-done 'time)

;; shortcut to store a link
(define-key global-map "\C-cl" 'org-store-link)

;; shortcut to org-agenda
(define-key global-map "\C-ca" 'org-agenda)

;; solve global tag searches
;; https://blog.aaronbieber.com/2016/03/05/playing-tag-in-org-mode.html
(defun air--org-swap-tags (tags)
  "Replace any tags on the current headline with TAGS.

The assumption is that TAGS will be a string conforming to Org Mode's
tag format specifications, or nil to remove all tags."
  (let ((old-tags (org-get-tags-string))
        (tags (if tags
                  (concat " " tags)
                "")))
    (save-excursion
      (beginning-of-line)
      (re-search-forward
       (concat "[ \t]*" (regexp-quote old-tags) "[ \t]*$")
       (line-end-position) t)
      (replace-match tags)
      (org-set-tags t))))

(defun air-org-set-tags (tag)
  "Add TAG if it is not in the list of tags, remove it otherwise.

TAG is chosen interactively from the global tags completion table."
  (interactive
   (list (let ((org-last-tags-completion-table
                (if (derived-mode-p 'org-mode)
                    (org-uniquify
                     (delq nil (append (org-get-buffer-tags)
                                       (org-global-tags-completion-table))))
                  (org-global-tags-completion-table))))
           (org-icompleting-read
            "Tag: " 'org-tags-completion-function nil nil nil
            'org-tags-history))))
  (let* ((cur-list (org-get-tags))
         (new-tags (mapconcat 'identity
                              (if (member tag cur-list)
                                  (delete tag cur-list)
                                (append cur-list (list tag)))
                              ":"))
         (new (if (> (length new-tags) 1) (concat " :" new-tags ":")
                nil)))
    (air--org-swap-tags new)))

;; set above to normal set-tags keybind
(define-key global-map "\C-cc" 'air-org-set-tags)

;; archive to an archive directory
(setq org-archive-location "archives/%s_archive::")

;; open logbook for this day
(defun open-log-file ()
  (interactive)
  (let ((default-directory "~/Org/"))
    (find-file (concat "devlogs/" (format-time-string "%Y-%m-%d") ".org"))))

(define-key global-map "\C-co" 'open-log-file)

;; open meeting for this day
(defun open-meeting-file ()
  (interactive)
  (let ((default-directory "~/Org/"))
    (find-file (concat "meetings/" "meeting-" (format-time-string "%Y-%m-%d") ".org"))))

(define-key global-map "\C-cm" 'open-meeting-file)
