#####
##### Python Virtualenv Helper
#####
# Doc:
#   These functions will help create and delete python virtual environments
# in a predefined directory. These will expose:
# - venv-activate : sources `bin/activate` in the venv directory
# - venv3-create  : creates a python3 virtualenv using the venv module
# - venv-create   : creates a python2 virtualenv using the `virtualenv` binary
# - venv-rm       : deletes a virtualenv directory at the path you specify (with y/n prompt)
# - venv-ls       : list directories (virtualenvs) in your `$VENV_DIR`
# - venv-cd       : changes directory to the `$VENV_DIR`

# This is where your Virtualenvs will go
VENV_DIR='/path/to/virtual/envs'

# Activate your virtualenv
function venv-activate {
  PROJECT=$1;
  source ${VENV_DIR}/${PROJECT}/bin/activate;
}

# Create a python2 virtualenv using `virtualenv`
function venv-create {
  PROJECT=$1;
  virtualenv ${VENV_DIR}/${PROJECT}
}

# Create a python3 virtualenv using `venv` module
# TODO(): Update this from workstation!
function venv3-create {
  PROJECT=$1;
  virtualenv -p $(which python3) ${VENV_DIR}/${PROJECT}
}

# Delete a virtualenv.
function venv-rm {
PROJECT=$1
PROJECT_PATH="$VENV_DIR"/"$PROJECT"
if [[ "$PROJECT_PATH" == "/" ]]
  then
    echo "STOPPING The Project Path is being registered as /. Preventing a potential removal of the root filesystem"
    return 3
fi

if [[ -z "$PROJECT_PATH" ]]
  then
    echo "ERROR Argument Required"
    return 2
else
  echo -n "Removing $PROJECT_PATH. Are you sure? [y/n]"
  read CONFIRMATION
  if [[ "$CONFIRMATION" == "y" ]] || [[ "$CONFIRMATION" == "Y" ]]
    then
      rm -ri "$PROJECT_PATH"
  else
    echo "Directory Removal Canceled"
  fi
fi
}

alias venv-list='ls ${VENV_DIR}'
alias venv-cd='cd ${VENV_DIR}'

